#!/bin/bash
# Description: potime - a simple cli task timer that outputs to timeclock files
# Author: Sangpo Dorje

thisdir="$( cd "$( dirname "$( realpath "${BASH_SOURCE[0]}" )" )" && pwd )"
PATH=${PATH}:${thisdir}

[[ -z "${TIMECLOCKFILE}" ]] && timeclockfile=~/${USER}.timeclock || timeclockfile="${TIMECLOCKFILE}"

# If an alarm.mp3 exists we'll try to use it... easy to drop in without messing with env
#FIXME: tidy this up, break out a function for the sound playback...
defsoundogg="${thisdir}/alarm.ogg"
defsoundmp3="${thisdir}/alarm.mp3"
if [[ ! -z "${TIMECLOCKSOUND}" ]]; then
	timeclocksound="${TIMECLOCKSOUND}"
elif [ -f "${defsoundmp3}" ]; then
	timeclocksound="${defsoundmp3}"
else
	# Sadly mac afplay cannot play .ogg and linux paplay cant play .mp3
	timeclocksound="${defsoundogg}"
fi

function helpmsg() {
	echo -e "\n"
	echo "         USAGE:  potime [minutes] [account:optionalsubaccount] [optional description]"
	echo "      EXAMPLES:  potime 25 POISM:DEV timeclocker"
	echo "   ENVIRONMENT:  export TIMECLOCKFILE=~/yourusername.timeclock"
	echo "CURRENT CONFIG:"
	echo "                 TIMECLOCKFILE: ${timeclockfile}"
	echo "                 TIMECLOCKSOUND: ${timeclocksound}"
	echo -e "\n"
}

if [ -z "${1}" ] || [ -z "${2}" ] || [ "${1}" == "-h" ] || [ "${1}" == "--help" ]; then
	helpmsg
	exit 1
fi

function installhledger() {
	hledgerversion="1.32.2"
	[[ "$OSTYPE" == "darwin"* ]] && osstr="mac" || osstr="linux"
	curl -L https://github.com/simonmichael/hledger/releases/download/${hledgerversion}/hledger-${osstr}-x64.zip -o "${thisdir}/hledger-${osstr}-x64.zip" && \
	unzip "${thisdir}/hledger-${osstr}-x64.zip" -d "${thisdir}/" && rm "${thisdir}/hledger-${osstr}-x64.zip" && \
	tar -xf "${thisdir}/hledger-${osstr}-x64.tar" -C "${thisdir}/" && rm "${thisdir}/hledger-${osstr}-x64.tar"
}

function progress() {
	progresswidth=40
	maxseconds=${1}
	for ((sec=1; sec<=${maxseconds}; sec++)); do
		pct=$((100*sec/(maxseconds)))
		progress=$(($progresswidth*$pct/100))
		incomplete=$(($progresswidth-$progress))
		progressbar=$(printf "%${progress}s" | tr " " "#")
		incompletebar=$(printf "%${incomplete}s" | tr " " "-")
		m=$((sec / 60))
		s=$((sec % 60))
		echo -ne "\r[${progressbar}${incompletebar}] ${pct}% ($m:$s)"
		sleep 1
	done
}

function extendtimer() {
	echo "Do you wish to extend the current task timer?"
	echo "Enter additional integer minutes to extend, or anything else to exit."
	read -r -p "--> " response
	if [[ ${response} == 0 ]]; then
		false
	elif [[ ${response} =~ ^[0-9]+$ ]]; then
		maxminutes=${response}
		maxseconds=$(( ${maxminutes} * 60))
		totalminutes=$((totalminutes + ${maxminutes}))
		true
	else
		false
	fi
}

function confirm() {
	read -r -p "${1:-Confirm? [y/n]} " response
	case "${response}" in
		[yY][eE][sS]|[yY])
			true
			;;
		*)
			false
			;;
	esac
}

function runtimer() {
	interrupted=0
	echo -e "${hrule}"
	echo "FILE: ${timeclockfile}"
	echo "TIME: ${maxminutes} minutes, starting at $(date +'%r')"
	if [ ${totalminutes} -gt ${maxminutes} ]; then
		echo "EXTEND: Task extended ${totalminutes} minutes. Originally was ${originalminutes} minutes, starting at ${starttimesimple}"
	fi
	echo "TASK: ${task}"
	progress ${maxseconds}

	echo -e "\n"
	echo "Press CTRL+c to stop timer"
	echo -e "\n"
	notifytitle="potime alert"
	notifymsg="DONE: ${totalminutes} minutes for ${account}!"
	soundext="${timeclocksound: -4}"
	overtime=0
	unset prevovertime
	
	while [[ ${interrupted} -eq 0 ]]; do
		if [[ ${prevovertime} == ${overtime} ]]; then
			sleep 2

		else
			echo -ne "\r${notifymsg}"
			if [[ "$OSTYPE" == "darwin"* ]]; then
			        # Mac OSX
				osascript -e "display notification \"${notifymsg}\" with title \"${notifytitle}\""
				if [ "${soundext}" != ".ogg" ]; then
					# macos afplay cannot play ogg, but can do mp3 or whatever else :(
					afplay "${timeclocksound}"
				else
					for (( c=0; c<=${overtime}; c++ )); do
						#chime for however minutes overtime
						afplay /System/Library/Sounds/Pop.aiff 
					done
				fi

			else
				# Linux
				if command -v notify-send &> /dev/null; then
					notify-send "${notifytitle}: ${notifymsg}"
				fi

				if command -v ffplay &> /dev/null; then
					# ffmpeg works with mp3
					ffplay -loglevel quiet -nodisp -autoexit "${timeclocksound}"
				elif command -v paplay &> /dev/null; then
					# paplay does not work for mp3
					if [ "${soundext}" == ".mp3" ]; then
						paplay "${defsoundogg}"
					else
						paplay "${timeclocksound}"
					fi
				fi
			fi
		fi
		prevovertime=${overtime}
		overtime=$((${SECONDS}/60-${totalminutes})) 
		notifymsg="OVERDUE: ${overtime} minutes past ${totalminutes} minute limit for ${account}!"
	done
}

function clockout() {
	interrupted=1
	endtime=$(date "+%Y/%m/%d %H:%M:%S")
	duration=$SECONDS
	clockhrs=$(( ${duration} / 3600 ))
	clockmin=$(( ${duration} % 3600 / 60))
	clockminonly=$(( ${duration} / 60))
	clocksec=$(( ${duration} % 60))
	durationstr="${clockminonly} minutes ${clocksec} seconds (originally ${originalminutes} minutes)"
	durshortstr="${clockhrs}h${clockmin}m${clocksec}s"
	echo -e "\n"
	echo -e "${hrule}"
	echo "TASK: ${task}"
	echo "TIMER: ${durationstr}."
	echo -e "${hrule}"

	if extendtimer; then
		echo -e "\n"
		echo "Extending timer for ${account} by ${maxminutes} additional minutes..."
		echo -e "\n"
		return
		#runtimer
	else
		task="${task} (${durshortstr})"
		echo "Enter any additional alphanumeric comments or press Enter"
		read -p "-->  " comments
		if [ ! -z "${comments}" ]; then
			commentsclean="${comments//[^[:alnum:-_\. ]]/_}"
			task="${task} ; ${commentsclean}"
		fi
		#FIXME: figure out how hledger tags work...
		#echo "INPUT any tags, like: tag1:value1, tag2:value2, tag3:, tag4:  and or press Enter"
		#read -p "-->  " tags
		#if [ ! -z "${tags}" ]; then
		#	task="${task} ${tags}"
		#fi
		echo -e "${hrule}"
		echo "CLOCKED TASK: ${task}"
		echo "CLOCKED TIME: ${durationstr}"

		echo "i $starttime $task" >> "${timeclockfile}"
		echo "o $endtime" >> "${timeclockfile}"
		echo -e "${hrule}"
		tail -n 2 "${timeclockfile}"
		if ! command -v hledger &> /dev/null; then
			echo "WARNING: hledger not installed, cannot check balances."
			echo "Do you wish to install hledger?"
			if confirm; then
				installhledger
			fi
		fi
			
		if command -v hledger &> /dev/null; then
			echo -e "${hrule}"
			echo "BALANCE for this ${account} account:"
			hledger -f "${timeclockfile}" balance ${account}
			echo -e "${hrule}"
			echo "TODAY'S BALANCE for all accounts:"
			hledger -f "${timeclockfile}" balance -D
		else
			echo "WARNING: hledger not installed, cannot check balances."
		fi
		echo -e "\n"
		exit
	fi
}


if [[ $1 =~ ^[0-9]+$ ]]; then
	maxminutes=${1}
	maxseconds=$(( ${maxminutes} * 60))
else
	echo "ERROR: duration minutes must be an integer."
	helpmsg
	exit 1
fi
account="${2}"
description="${@:3}"
descriptionclean="${description//[^[:alnum:-_\. ]]/_}"

task="${account}  ${descriptionclean}"

SECONDS=0
starttime=$(date "+%Y/%m/%d %H:%M:%S")
starttimesimple="$(date +'%r')"
originalminutes=${maxminutes}
totalminutes=${maxminutes}

hrule="______________________________________________________________\n"

alldone=0

# Catch any CTRL+C or exits to clockout function
trap clockout SIGINT
while [[ ${alldone} -eq 0 ]]; do
	sleep 1
	runtimer
done

